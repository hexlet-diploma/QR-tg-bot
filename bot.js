import TelegramBot from "node-telegram-bot-api";
import qr from "qr-image";
import { config } from './config.js';
import { db } from './db/database.js';

const bot = new TelegramBot(config.botToken, { polling: true });
const Rate_Limit = 10;
const rateLimit = new Map();

// Initialize database
await db.init();

// Update daily stats every hour
setInterval(async () => {
    try {
        await db.updateDailyStats();
    } catch (error) {
        console.error('Error updating daily stats:', error);
    }
}, 3600000); // 1 hour

bot.setMyCommands([
	{command:'/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
	{command:'/help', description: '–ü–æ–º–æ—â—å'}
])

function isValidUrl(string) {
    try {
        const url = new URL(string);
        // Check if it's a valid URL with http/https protocol
        if (!['http:', 'https:'].includes(url.protocol)) {
            return false;
        }
        // Check if it has a valid hostname (at least one dot for domain)
        if (!url.hostname.includes('.')) {
            return false;
        }
        // Check if the hostname is not just a TLD
        const parts = url.hostname.split('.');
        if (parts.length < 2 || parts[0].length === 0) {
            return false;
        }
        return true;
    } catch (err) {
        return false;
    }
}
function normalizeUrl(input) {
    if (/^https?:\/\//i.test(input)) {
        return input;
    }
    return `https://${input}`;
}

async function generateQrCode(url) {
    return new Promise((resolve, reject) => {
        const qrStream = qr.image(url, { 
            type: 'png',
            size: 10, 
            margin: 2
        });
        
        const chunks = [];
        qrStream.on('data', chunk => chunks.push(chunk));
        qrStream.on('error', reject);
        qrStream.on('end', () => resolve(Buffer.concat(chunks)));
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ Markdown
function escapeMarkdown(text) {
    return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è URL
function formatUrl(url) {
    try {
        const urlObj = new URL(url);
        return `[${escapeMarkdown(url)}](${escapeMarkdown(url)})`;
    } catch (e) {
        return escapeMarkdown(url);
    }
}

function checkRateLimit(userId) {
	const now = Date.now();
	const timestamps = rateLimit.get(userId) || [];
	const recent = timestamps.filter(t => now - t < 60000);
	
	if (recent.length >= Rate_Limit) return false;
	
	recent.push(now);
	rateLimit.set(userId, recent);
	return true;
  }


async function handleError(chatId, error) {
    console.error(`Error in chat ${chatId}:`, error);
    
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. ';
    
    if (error.message.includes('parse entities')) {
        errorMessage += '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.';
    } else if (error.message.includes('rate limit')) {
        errorMessage += '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.';
    } else if (error.message.includes('invalid url')) {
        errorMessage += '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: example.com –∏–ª–∏ https://example.com';
    } else {
        errorMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
    
    await bot.sendMessage(chatId, errorMessage);
}

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
üõ† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QR Generator Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –∏–∑ –ª—é–±–æ–π —Å—Å—ã–ª–∫–∏.

üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É
2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—é –µ—ë, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π QR-–∫–æ–¥

üîπ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ example.com
‚Ä¢ www.example.com
‚Ä¢ https://example.com
‚Ä¢ http://example.com

üí° *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP/HTTPS
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 2000 —Å–∏–º–≤–æ–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
    `;
    
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
üìå *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥

üìù *–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:*
‚Ä¢ example.com
‚Ä¢ www.example.com/path
‚Ä¢ https://example.com
‚Ä¢ http://example.net

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –¢–æ–ª—å–∫–æ HTTP/HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
‚Ä¢ –ù–µ –±–æ–ª–µ–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

‚ùì *–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    `;
    
    bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

bot.on('message', async (msg) => {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const messageText = msg.text?.trim();

    // Track user with proper data
    if (msg.from) {
        const userData = {
            user_id: msg.from.id,
            username: msg.from.username || null,
            first_name: msg.from.first_name || null,
            last_name: msg.from.last_name || null
        };
        await db.upsertUser(userData);
    }

    if (!messageText || messageText.startsWith('/')) {
        return;
    }

    const startTime = Date.now();
    let success = false;
    let errorMessage = null;

    try {
        if (messageText.length > 2000) {
            errorMessage = '–°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è';
            return bot.sendMessage(chatId, '‚ùå –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2000 —Å–∏–º–≤–æ–ª–æ–≤.');
        }

        let url;
        try {
            url = normalizeUrl(messageText);
        } catch (e) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏';
            return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ example.com\n‚Ä¢ https://example.com');
        }

        if (!isValidUrl(url)) {
            errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞';
            return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ example.com\n‚Ä¢ https://example.com');
        }

        if (!checkRateLimit(userId)) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
            return bot.sendMessage(chatId, '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.');
        }

        bot.sendChatAction(chatId, 'upload_photo');

        const qrImage = await generateQrCode(url);
        success = true;

        await bot.sendPhoto(chatId, qrImage, {
            caption: `üîó ${formatUrl(url)}`,
            parse_mode: 'MarkdownV2'
        });

    } catch (error) {
        errorMessage = error.message;
        handleError(chatId, error);
    } finally {
        const responseTime = Date.now() - startTime;
        await db.logRequest(userId, messageText, success, responseTime, errorMessage);
    }
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('Bot started...');